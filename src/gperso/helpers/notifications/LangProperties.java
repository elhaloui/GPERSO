package gperso.helpers.notifications;

/**
 * Created by dimmaryanto on 23/12/15.
 */
public enum LangProperties {
    ACTION("javafx.action.do"),
    ADD("javafx.action.add"),
    ARE_YOU_SURE("javafx.action.areyousure"),
    BACK("javafx.action.back"),
    BEING_PROCESSED("javafx.action.being.processed"),
    CANCEL("javafx.action.cancel"),
    YES("javafx.action.checkbox.checked"),
    NOT_YET("javafx.action.checkbox.unchecked"),
    CLEAR("javafx.action.clear"),
    CLEAR_SELECTION("javafx.action.clear.selection"),
    CLOSE("javafx.action.close"),
    DELETE("javafx.action.delete"),
    HAS_BEEN_PROCESSED_WITH_PARAM("javafx.action.has.been.processed"),
    HAS_BEEN_PROCESSED("javafx.notification.warning.has.been.processed"),
    LOADING("javafx.action.load"),
    NEW_DATA("javafx.action.new"),
    NEXT("javafx.action.next"),
    PAYOFF("javafx.action.payoff"),
    POWER_OFF("javafx.action.power.off"),
    PRINT("javafx.action.print"),
    REFRESH("javafx.action.refresh"),
    REMOVE("javafx.action.remove"),
    REPAYMENT("javafx.action.repayment"),
    SAVE("javafx.action.save"),
    SIGN_IN("javafx.action.sign.in"),
    SIGN_OUT("javafx.action.sign.out"),
    UPDATE("javafx.action.update"),
    VIEW("javafx.action.view"),
    ERROR_LOADING_WITH_PARAM("javafx.notification.error.loading"),
    ERROR_PRINT_WITH_PARAM("javafx.notification.error.print"),
    ERROR_REMOVE_WITH_PARAMS("javafx.notification.error.remove"),
    ERROR_SAVE_WITH_PARAM("javafx.notification.error.save"),
    ERROR_UPDATE_WITH_PARAMS("javafx.notification.error.update"),
    PROGRESS_FINISHED_WITH_PARAM("javafx.notification.progress.finish"),
    PROGRESS_GETTING_WITH_PARAMS("javafx.notification.progress.getting"),
    PROGRESS_LOADING_WITH_PARAM("javafx.notification.progress.loading"),
    QUESTION_REMOVE_WITH_PARAMS("javafx.notification.question.remove"),
    QUESTION_ARE_YOU_SURE("javafx.notification.question.sure"),
    SUCESSED_REMOVE_WITH_PARAM("javafx.notification.success.remove"),
    SUCESSED_SAVE_WITH_PARAM("javafx.notification.success.save"),
    SUCESSED_SAVE_WITH_PARAMS("javafx.notification.success.save.item"),
    SUCESSED_UPDATE_WITH_PARAM("javafx.notification.success.update"),
    SUCESSED_UPDATE_WITH_PARAMS("javafx.notification.success.update.item"),
    CANT_REMOVE_SENT_WITH_PARAM("javafx.notification.warning.cant.remove.sent"),
    EXPIRED_DATE_WITH_PARAM("javafx.notification.warning.expired"),
    NOT_ENOUGH_WITH_PARAM("javafx.notification.warning.not-enough"),
    NOT_NULL_WITH_PARAM("javafx.notification.warning.notnull"),
    ON_PROGRESS("javafx.notification.warning.on.progress"),
    HAS_BEEN_PAID_WITH_PARAM("javafx.notification.warning.paid"),
    HAS_BEEN_SEND_WITH_PARAM("javafx.notification.warning.sent"),
    DATE_NOT_EQUAL_NOW("javafx.validation.date-equal-not-now"),
    EMPTY_WITH_PARAM("javafx.validation.empty"),
    MIN_WITH_PARAM("javafx.validation.min"),
    MIN_MAX_WITH_PARAMS("javafx.validation.min-max"),
    NOT_SELECTED_WITH_PARAM("javafx.validation.not-selected"),
    NULL_WITH_PARAM("javafx.validation.null"),
    MAIN_MENU("scene.home.menu"),
    MENU_APPLICATION("scene.home.menu.application"),
    EXIT("scene.home.menu.application.exit"),
    LOGIN("scene.home.menu.application.login"),
    LOGOUT("scene.home.menu.application.logout"),
    DATA_EXPENDITURS("scene.home.menu.expenditur"),
    LIST_OF_OTHER_PAYMENTS("scene.home.menu.expenditur.payment"),
    DATA_AN_OTHER_PAYMENT("scene.home.menu.expenditur.payment.apayment"),
    LIST_PAYROLLS("scene.home.menu.expenditur.payroll"),
    DATA_PAYROLL_AN_EMPLOYEE("scene.home.menu.expenditur.payroll.an-employee"),
    LIST_PURCHASES("scene.home.menu.expenditur.purchase"),
    DATA_PURCHASE("scene.home.menu.expenditur.purchase.a-purchase"),
    LIST_OF_SALES_DELIVERIES("scene.home.menu.expenditur.sales.delivery"),
    DATA_SALES_DELIVERY("scene.home.menu.expenditur.sales.delivery.a-delivery"),
    HELP("scene.home.menu.help"),
    CONTACT("scene.home.menu.help"),
    MENU_INCOME("scene.home.menu.income"),
    LIST_OF_SALES("scene.home.menu.income.sales"),
    DATA_A_SALES("scene.home.menu.income.sales.a-sales"),
    LIST_OF_SALES_ORDER("scene.home.menu.income.sales.order"),
    DATA_A_SALES_ORDER("scene.home.menu.income.sales.order.an-order"),
    MENU_MASTER("scene.home.menu.master"),
    LIST_OF_CUSTOMERS("scene.home.menu.master.customer"),
    DATA_A_CUSTOMER("scene.home.menu.master.customer.a-customer"),
    LIST_OF_DEPARTMENTS("scene.home.menu.master.department"),
    DATA_A_DEPARTMENT("scene.home.menu.master.department.a-department"),
    LIST_OF_EMPLOYEES("scene.home.menu.master.employee"),
    DATA_AN_EMPLOYEE("scene.home.menu.master.employee.an-employee"),
    LIST_OF_ITEMS("scene.home.menu.master.item"),
    DATA_AN_ITEM("scene.home.menu.master.item.an-item"),
    LIST_OF_ITEM_CATEGORIES("scene.home.menu.master.item.category"),
    DATA_A_CATEGORY_OF_ITEM("scene.home.menu.master.item.category.a-category"),
    LIST_OF_UNITS("scene.home.menu.master.item.unit"),
    DATA_AN_UNIT_OF_ITEM("scene.home.menu.master.item.unit.an-unit"),
    LIST_OF_WAREHOUSES("scene.home.menu.master.item.warehouse"),
    DATA_A_WAREHOUSE("scene.home.menu.master.item.warehouse.a-warehouse"),
    LIST_OF_SUPLAYERS("scene.home.menu.master.suplayer"),
    DATA_A_SUPLAYER("scene.home.menu.master.suplayer.a-suplayer"),
    LIST_OF_PAYMENT_CATEGORY("scene.home.menu.master.payment.category"),
    DATA_CATEGORY_OF_PAYMENT("scene.home.menu.master.payment.category.a-category"),
    MENU_PRODUCTIONS("scene.home.menu.production"),
    LIST_OF_SALES_PRODUCTIONS("scene.home.menu.production.sales"),
    DATA_SALES_PRODUCTION("scene.home.menu.production.sales.a-sales"),
    LIST_OF_ITEMS_USED("scene.home.menu.production.used"),
    DATA_ITEM_USED("scene.home.menu.production.used.an-used"),
    MENU_REPORT("scene.home.menu.report"),
    REPORT_FINANCIAL_STATEMENT("scene.home.menu.report.financial.statement"),
    REPORT_SALES_INCOME("scene.home.menu.report.sales.income"),
    REPORT_SALES_TURNOVER("scene.home.menu.report.sales.turnover"),
    MENU_SETTING("scene.home.menu.setting"),
    LIST_ACCOUNTS("scene.home.menu.setting.account"),
    DATA_AN_ACCOUNT("scene.home.menu.setting.account.an-account"),
    USERNAME("java.model.account.username"),
    PASSWORD("java.model.account.password"),
    CONFIRM_PASSWORD("java.model.account.password.confirm"),
    NEW_PASSWORD("java.model.account.password.new"),
    LEVEL("java.model.account.level"),
    LAST_LOGIN("java.model.account.last.login"),
    IS_ACTIVE("java.model.account.is.active"),
    ACCOUNT_FULLNAME("java.model.account.fullname"),
    CITY("java.model.address.city"),
    DISTRICT("java.model.address.district"),
    NA("java.model.address.na"),
    NL("java.model.address.nl"),
    PIN_CODE("java.model.address.pin.code"),
    STREET_ADDRESS("java.model.address.street.address"),
    CREATED_BY("java.model.base.table.entity.created.by"),
    CREATED_DATE("java.model.base.table.entity.created.date"),
    LAST_UPDATED_DATE("java.model.base.table.entity.last.updated.date"),
    AMOUNT("java.model.cash.reciept.amount"),
    CASHBACK("java.model.cash.reciept.cashback"),
    PAID("java.model.cash.reciept.paid"),
    PAYMENT("java.model.cash.reciept.payment"),
    DESCRIPTION("java.model.category.item.description"),
    ID("java.model.category.item.id"),
    NAME("java.model.category.item.name"),
    CREDIT("java.model.financial.statement.credit"),
    DEBIT("java.model.financial.statement.debit"),
    CATEGORY("java.model.item.category"),
    IS_SELL("java.model.item.is.sell"),
    PRICE_SELL("java.model.item.price.buy"),
    PRICE_BUY("java.model.item.price.sell"),
    QTY("java.model.item.qty"),
    UNIT("java.model.item.unit"),
    WAREHOUSE("java.model.item.warehouse"),
    SALARY("java.model.payroll.amount"),
    DATE_WITH_DAY("java.model.payroll.date.timestame"),
    ITEM_USED("java.model.production.sales.details.item.used"),
    SELECT_AN_EMPLOYEE("java.model.production.sales.employee"),
    GRANT_TOTAL("java.model.purchase.grant.total"),
    SELECT_AN_ITEM("java.model.purchase.details.item"),
    WEIGHT_PER_KG("java.model.sales.delivery.details.weight.per.kg"),
    STATUS("java.model.sales.delivery.status"),
    TRANSACTION_ID("java.model.sales.delivery.trans.id"),
    EXPAIRED("java.model.sales.expaired"),
    MONTH("java.model.sales.month"),
    YEAR("java.model.sales.year"),
    SHIP_TO("java.model.sales.shit.to"),
    DIRECT_SELLING("java.model.sales.sent.direct"),
    SENDING("java.model.sales.sent.sending"),
    ALREADY_RECIEVED("java.model.sales.status.already.recieved"),
    ALREADY_SENT("java.model.sales.status.already.sent"),
    HAS_EXPIRED("java.model.sales.status.has.expired"),
    HAS_PAID_OF("java.model.sales.status.has.paid"),
    CONTACT_PERSON("java.model.customer.phone"),
    JOB_NAME("scene.employee.placeholder.jobname"),
    CUSTOMER("java.model.sales.order.customer"),
    ON_SALE("scene.sales.order.do.sale"),
    DATE("scene.sales.delivery.date"),
    WILL_NOT_BE_SENT("javafx.notification.warning.will.not.be.sent"),
    WILL_BE_SENT("javafx.notification.warning.will.be.sent"),
    WILL_NOT_BE_SENT_WITH_PARAM("javafx.notification.warning.will.not.be.sent.item"),
    WILL_BE_SENT_WITH_PARAM("javafx.notification.warning.will.be.sent.item"),
    NOT_YET_RECEIVED("javafx.notification.warning.not.yet.received"),
    NOT_YET_RECEIVED_WITH_PARAM("javafx.notification.warning.not.yet.received.item"),
    ALREADY_RECEIVED("javafx.notification.warning.already.received"),
    ALREADY_RECEIVED_WITH_PARAM("javafx.notification.warning.already.received.item"),
    SALES_DETAILS_WITH_PARAM("javafx.action.view.transaction.sales"),
    SALES_DELIVERY_DETAILS_WITH_PARAM("javafx.action.view.transaction.sales.delivery"),
    LIST_OF_CASH_RECIEPT_EMPLOYEE("scene.home.menu.expenditur.cash.reciept.employee"),
    DATA_CASH_RECIEPT("scene.home.menu.expenditur.cash.reciept.employee.a-cash-reciept"),
    LIST_PAYROLL_EMPLOYEE_DEPT_PRODUCTION("scene.home.menu.expenditur.payroll.list-payroll-for-prodution-sales"),
    HAS_BEEN_CALCULATED("javafx.notification.warning.has.been.calculated"),
    WILL_NOT_BE_COUNTED("javafx.notification.warning.will.not.be.counted"),
    IS_EMPTY_WITH_PARAM("javafx.notification.warning.empty"),
    YET_CALCULATED("javafx.notification.warning.yet.calculated"),
    SYSTEM_INFORMATION_TRANSACTION_OF_INCOME_AND_EXPENDITUR("scene.home.header.title"),
    SOON_TO_BE_REPAID("javafx.notification.warning.soon.to.be.repaid"),
    FINANCIAL_STATEMENT("scene.home.menu.report.financial.statement"),
    UNPROCESSED("scene.financial.statement.unprocessed"),
    TOTAL_TRANSACTION_REVENUES("scene.financial.statement.total.revenues"),
    TOTAL_NET_INCOME("scene.financial.statement.total.net.income"),
    TOTAL_ACCOUNTS_RECIEVABLE("scene.financial.statement.total.accounts.recievable"),
    WILL_BE_CALCULATED("javafx.notification.warning.will.be.calculated"),
    AUTHENTICATION_FAILED("javafx.notification.warning.authentication.failed"),
    THIS_ACCOUNT_NOT_ACTIVE("javafx.notification.warning.account.not.active"),
    DISABLED("javafx.action.disabled"),
    ACTIVATED("javafx.action.activated"),
    PROTECTED("javafx.action.protected"),
    FORBIDDEN("javafx.action.forbidden"),
    QTY_OF_ITEM_LESS_THAN_PARAMS("javafx.notification.warning.item.min"),
    PROCESS("javafx.action.processed"),
    NOT_READY("javafx.action.not.ready"),
    READY_FOR_SALE("javafx.action.ready.for.sale");


    private final String value;

    LangProperties(String s) {
        this.value = s;
    }

    public String getValue() {
        return value;
    }
}
